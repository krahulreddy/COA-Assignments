$date
	Thu Oct 25 23:34:28 2018
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb_ALU $end
$var wire 1 ! Zero $end
$var wire 64 " Result [63:0] $end
$var wire 1 # CarryOut $end
$var reg 64 $ A [63:0] $end
$var reg 64 % B [63:0] $end
$var reg 1 & CarryIn $end
$var reg 4 ' Op [3:0] $end
$var integer 32 ( i [31:0] $end
$scope module alu1 $end
$var wire 64 ) A [63:0] $end
$var wire 64 * B [63:0] $end
$var wire 1 & CarryIn $end
$var wire 4 + Op [3:0] $end
$var reg 1 # CarryOut $end
$var reg 64 , Result [63:0] $end
$var reg 1 ! Zero $end
$var reg 64 - a [63:0] $end
$var reg 64 . b [63:0] $end
$var integer 32 / i [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b1000000 /
b10 .
b1 -
b0 ,
b0 +
b10 *
b1 )
bx (
b0 '
0&
b10 %
b1 $
x#
b0 "
1!
$end
#1
b1000000 /
b0 (
1&
#2
0!
b11 "
b11 ,
b1000000 /
b1 (
0&
b1 '
b1 +
#3
b1000000 /
b10 (
1&
#4
0#
b1000000 /
b11 (
0&
b10 '
b10 +
#5
b1000000 /
b100 (
1&
#6
b1000000 /
b101 (
0&
b11 '
b11 +
#7
b1000000 /
b110 (
1&
#8
b1 "
b1 ,
b1111111111111111111111111111111111111111111111111111111111111101 .
b1000000 /
b111 (
0&
b100 '
b100 +
#9
b1000000 /
b1000 (
1&
#10
b1111111111111111111111111111111111111111111111111111111111111101 "
b1111111111111111111111111111111111111111111111111111111111111101 ,
b1000000 /
b1001 (
0&
b101 '
b101 +
#11
b1000000 /
b1010 (
1&
#12
b1111111111111111111111111111111111111111111111111111111111111111 "
b1111111111111111111111111111111111111111111111111111111111111111 ,
b1000000 /
b1011 (
0&
b110 '
b110 +
#13
b1000000 /
b1100 (
1&
#14
b1000000 /
b1101 (
0&
b111 '
b111 +
#15
b1000000 /
b1110 (
1&
#16
b10 "
b10 ,
b10 .
b1111111111111111111111111111111111111111111111111111111111111110 -
b1000000 /
b1111 (
0&
b1000 '
b1000 +
#17
b1000000 /
b10000 (
1&
#18
b1111111111111111111111111111111111111111111111111111111111111110 "
b1111111111111111111111111111111111111111111111111111111111111110 ,
b1000000 /
b10001 (
0&
b1001 '
b1001 +
#19
b1000000 /
b10010 (
1&
#20
1!
1#
b0 "
b0 ,
b1000000 /
b10011 (
0&
b1010 '
b1010 +
#21
b1000000 /
b10100 (
1&
#22
b1000000 /
b10101 (
0&
b1011 '
b1011 +
#23
b1000000 /
b10110 (
1&
#24
0!
b1111111111111111111111111111111111111111111111111111111111111100 "
b1111111111111111111111111111111111111111111111111111111111111100 ,
b1111111111111111111111111111111111111111111111111111111111111101 .
b1000000 /
b10111 (
0&
b1100 '
b1100 +
#25
b1000000 /
b11000 (
1&
#26
b1111111111111111111111111111111111111111111111111111111111111111 "
b1111111111111111111111111111111111111111111111111111111111111111 ,
b1000000 /
b11001 (
0&
b1101 '
b1101 +
#27
b1000000 /
b11010 (
1&
#28
b1111111111111111111111111111111111111111111111111111111111111100 "
b1111111111111111111111111111111111111111111111111111111111111100 ,
b1000000 /
b11011 (
0&
b1110 '
b1110 +
#29
b1000000 /
b11100 (
1&
#30
b1000000 /
b11101 (
0&
b1111 '
b1111 +
#31
b1000000 /
b11110 (
1&
#32
1!
b0 "
b0 ,
b10 .
b1 -
b1000000 /
b11111 (
0&
b0 '
b0 +
#33
b100000 (
